# Hiểu về datatype
Kiểu dữ liệu nguyên thủy là kiểu có kích thước cố định, được lưu trong ngăn xếp cố định để truy cập theo giá trị cải thiện tốc độ truy vấn biến. 
Kiểu dữ liệu tham chiếu là kiểu có kích thước thay đổi nên phải lưu trên heap và truy cập theo địa chỉ reference nên tốc độ truy vấn biến chậm hơn, như array, object.
=> Biến class trong C# lưu trên heap cũng giúp C# garbage collector tự động thu gom rác trên heap, giải phóng bộ nhớ khi k còn tham chiếu mà k cần quan tâm đến phạm vi sử dụng (khi không còn biến nào trên stack reference tới nó nữa)



# Các môi trường trong 1 dự án 
- 1 là production là môi trường k thể debug, chỉ có thể theo dõi log, là nơi khách hàng chạy, chỉ có thể hotfix hoặc tạo release mới
- Môi trường CI hiếm dùng là môi trường gần giống như production để test upgrade mà 1 phát up bản release mới luôn từ release cũ, data cũ và mới phải đồng bộ
- 2 là môi trường QA là môi trường có thể debug, sử dụng data thực của các QA để chạy tìm lỗi, test case 
- 3 là development là môi trường chung của hàng loạt dev, giống môi trường QA nhưng data của dev nên tùy biến thoải mái
- Môi trường cá nhân, mỗi người 1 data custom, code bất cứ thứ gì mà k ảnh hưởng tới ai. Có thể setup docker thay thế cho mọi connect remote và code độc lập.
=> Các bước setup đổi môi trường nên thật là dễ dàng, gom chung 1 file duy nhất, tách biệt chạy với docker các thứ



# Bảo mật E2E
HTTP là truyền tin bị MITM attack
HTTPs cản được vì thông tin truyền đi bị mã hóa khi thiết lập SSL connection với server. Nhưng như v server vẫn nhìn thấy nội dung data và biết thông tin nhạy cảm của user

Giao thức E2E giải quyết vấn đề: 2 users trao đổi pubkey qua server, mỗi user dùng pubkey của người kia để mã hoá trước khi gửi tới server, server chỉ forward tin tới đích.
=> Hacker tấn công server cũng k biết được message là gì, user phải nhớ mật khẩu mới xem được lịch sử tin nhắn.



# Usecase đồng bộ vào elastic search
Usecase postgreSQL đang có data, nhưng để tối ưu tốc độ truy vấn, ta phải đồng bộ vào elastic search. Đơn giản chỉ cần chạy job query data từ DB insert vào elastic search. 

VD có 1 trăm triệu rows cần đồng bộ sẽ buộc mọi query db đều phải dùng index. Nhưng query plan trong DB tối ưu như nào, nhiều lúc ta k kiểm soát được, nếu quá lâu thì cần check từng lệnh để fix. Thậm chí có lệnh ta đánh index rồi nhưng nó không dùng, MySQL chạy index nhưng sang PostgreSQL cùng query nhưng lại éo dùng, phải check mới biết được.
Lệnh "EXPLAIN (ANALYZE, BUFFERS) <query>" sẽ giải thích chi tiết 1 query, nếu có query không dùng INDEX COND mà dùng FILTER tức duyệt hết thì phải sửa. Tham số BUFFER luôn dùng để cung thêm thông tin qtr về data. Khi thực hiện, DB tự động lưu buffer để tối ưu, thông số buffer shared hit báo ta lưu nhiều như nào.

Chú ý khi dùng OR trong db với data quá lớn or đk phức tạp, PostgreSQL có thể thực hiện FULL TABLE SCAN và loại bỏ đi rows k thoả mãn, thay vì dùng index. Có thể fix bằng cách tách queries, đổi sang dùng UNION, gộp so sánh trong tuple.
URL: https://mattermost.com/blog/making-a-postgres-query-1000-times-faster/



# Khi cần gọi quá nhiều API 1 lúc
Có thể viết để cho max 3 request chạy 1 lúc tránh quá tải server hoặc lỗi ratelimit hoặc lỗi bị server chặn nếu gọi bên thứ 3.
Trong browser có sẵn cơ chế giới hạn số lượng request chạy đồng thời rồi, nên làm ở FE k mang nhiều ý nghĩa
Tạo BFF 



# Fuzzy search alg
Thuật toán tìm kiếm gần đúng trên 1 list. Nhận vào 2 string và trả ra độ so khớp match nhau không.
Để search tự sửa lỗi chính ta, implement thêm spell corrector chấp nhận chuỗi đích có độ so khớp ở 1 mức thấp là được.
Ngoài ra còn có: Levenstein Distance Algorithm, N-gram Algorithm, BK Tree Algorithm, Bitap Algorithm

-> Naive Algorithm: duyệt 2 vòng for tìm input xuất hiện trong chuỗi đích trong list thì match. Tức chuỗi tìm kiếm phải liền nhau exactly đúng thứ tự.

-> Hamming Distance Algorithm: input là 2 chuỗi cùng kích thước, cho ra số lượng ký tự k khớp nhau. 
Thuật toán giúp tìm gần đúng chuỗi đích nhưng nhược điểm là chuỗi phải cùng độ dài, nếu k cùng độ dài sẽ k luôn k khớp nên kém linh hoạt trong trường hợp ký tự thêm bớt ký tự

-> Levenshtein Distance (Edit Distance): đo sự khác biệt giữa hai chuỗi bằng cách đếm số lượng các phép chèn, xóa, thay thế cần thiết để biến chuỗi này thành chuỗi kia.
Thuật toán tốt giúp sủa lỗi chính tả chuẩn

=> Nếu muốn tìm kiếm một chuỗi ngắn trong một danh sách các chuỗi rất dài sẽ phải duyệt qua từng chuỗi dài và so sánh chuỗi ngắn với các đoạn con của chuỗi dài. Việc này rất chậm và cần tiền xử lý nhiều thứ, khi gặp case này, ta thường dùng các công cụ như Elastic Search chứ k tự implement, Elastic Search có hỗ trợ fuzzy search nhé. 



# QPS
-> Định luật 80/20 là 80% request trong 1 ngày rơi vào 20% thời gian. Nếu hệ thống có 2M request/ngày thì cần bnh QPS và nếu 1 server chịu được 60 QPS thì cần bnh server? 
QPS là số lượng query 1s. Response time là thời gian request đi và về. TPS là transaction per second. VD 1 TPS có 2 QPS tức 1 transaction query tới server 2 lần.
Server của ta cần xử lý được tải lúc giờ cao điểm mới được: 2M request * 80% = 1.6M request
86400 * 20% = 17280s tức 1.6M request rơi vào 20% thời gian là 17200s
QPS = 1.6M request / 17200s = 93 request/s => Cần 2 server hoạt động giờ cao điểm để chạy mượt mà.


