RabbitMQ


# Basic
Mỗi loại có thế mạnh riêng: RocketMQ, RabbitMQ, Kafka, ActiveMQ

-> Install RabbitMQ
1) Tạo RabbitMQ bằng cloud free sẽ có sẵn cho hosting: https://customer.cloudamqp.com/
Datacenter chọn Amazon ở Singapore. Tạo sẽ vào được trang dashboard quản lý (Ấn RabbitMQ Management), nó cung port, uri cần để connect.
2) Install bằng docker tùy ý custom localhost: https://www.rabbitmq.com/download.html
docker pull rabbitmq:3.12-management -> docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.12-management
=> Án xạ cổng 5672 để connect, cổng 15672 để quản lý. Vào localhost:15672 và nhập tk mk đều là "guest" để truy cập dashboard.

-> Trong nodejs: npm i amqplib

-> RabbitMQ có lợi gì hơn dùng hàng đợi tự implement lưu trong db
- RabbitMQ cho phép đọc đồng thời và pop khỏi queue nhiều tin nhắn, dùng multiple consumers cấu hình được hết, còn db phải chờ lần lượt vì tính chất của transaction
- RabbitMQ hỗ trợ routing, pub/sub trên nhiều loại hàng đợi, nhiều plugin mở rộng, có cơ chế bảo mật tích hợp như TLS để mã hóa. Db k có mà phải tự implement đống đó, thay vì pubsub thì phải check db định kỳ, cơ chế ack cũng phải tự implement thủ công trong server.
- RabbitMQ có các công cụ thống kê, giám sát đi kèm với giao diện web. DB chỉ dùng SQL thao tác thôi

-> VD: User <--100ms--> System -- MessageQueue --200ms-- Service 1 gửi mail
                                               --400ms-- Service 2 tích điểm
                                               --100ms-- Service 3 cộng rank
Ta cũng có thể dùng 3 message queue, mỗi MQ xử lý 1 service riêng kiểu hàng đợi cũng đươc

Nhược điểm MQ là làm hệ thống thiếu tính nhất quán. User có thể thấy request đã xử lý thành công nhưng thực chất nó vẫn chưa được xử lý xong, vẫn có xác suất bị miss message

-> Usecase: Ta có 1 server connect MySQL chịu tải max 2k request 1s, bth nhận 50 request 1s nên chạy vẫn ok. Nhưng sau khi phát mã giảm giá, số lượng request vào thời điểm đó tăng lên 5k request 1s làm sập db server (giả sử k dùng cache ở TH này). Khi đó có thể dùng MQ, config hàng đợi cho output max 2k request 1s, thì dù đầu vào nhiều đến đâu thì hàng đợi cũng chỉ cung ra 2k request 1s. Các request khác sẽ nằm trong hàng đợi chờ được lấy ra, tăng tính bền vững của hệ thống. Đảm bảo người đến sau phải thực hiện sau.
RabbitMQ chịu được tầm 10k request, thông lượng yếu hơn so với Kafka. Còn độ trễ hay độ tin cậy thì RabbitMQ tốt hơn, khó miss message hơn. 



# Update đồng bộ cache database
Nếu hệ thống ít user thì k cần cache, chỉ xét trường hợp nhiều người dùng đồng thời. Cache luôn phải đồng bộ data với db gốc, khi write sẽ update cả cache và db, khi read sẽ đọc trong cache, không có thì đọc trong DB rồi update vào cache. Nhưng các quá trình đó kp transaction nên bị sai khi nhiều người read/write or write/write đồng thời.
Khi cần update data trong cache thì delete thay vì gán 1 giá trị rỗng hoặc update thủ công cho nó vì lệnh xóa nhanh gọn, tiết kiệm bộ nhớ và tốt hơn lệnh set về tính nhất quán. Cache sẽ tự động được update ở lần get đầu tiên của user.

VD1 A write, B read: A del cache chứ k set cache, sau đó update db. Đồng thời B read cache k có sẽ read DB có data cũ r update cache. Lúc này A mới update database thì DB và cache khác dữ liệu nhau.
VD2 A write, B write: giả sử cả 2 set cache chứ k del cache. A set giá trị cache. B set giá trị cache. B update DB. Lúc này A mới update DB thì bị sai vì A và B update sai thứ tự
=> Để giảm lỗi, ít nhất là ta phải luôn set db trước rồi mới update cache. Nó đảm bảo database gốc được update đúng thứ tự nhưng vẫn chưa đủ tốt, VD case2 bên trên vẫn có thể bất đồng bộ data vì cache và db k update trong cùng 1 tx. 
=> RabbitMQ ra đời cũng giúp database và cache được đồng bộ chuẩn hơn. VD 2 request ta đều cho vào MQ, mỗi request sẽ update db thành công thì update cache tiếp, xong mới gửi ack để lấy request tiếp từ queue ra xử lý tuần tự. TH đơn giản có thể tự implement mutex locking ở server thủ công để 2 hàm udpate là atomic.



# Messaging pattern trong RabbitMQ
1) Message Queue: Producer gửi message vào 1 queue cụ thể và consumer nhận xử lý message đó bất đồng bộ. Mỗi message chỉ được xử lý bởi 1 consumer và đảm bảo tính có thứ tự.
Producers ---> Message Queues ---> Consumer
=> Thường dùng cho kiểu workload distribution hay load balancing vì chỉ 1 consumer nhận. VD cấu hình message 1 là consumer 1 xử lý thì message 2 sẽ gửi cho 1 consumer khác.

2) Publish/Subscribe => Khi message gửi tới nhiều consumer chứ k chỉ 1
Producers --> RabbitMQ (MessageBroker)[Exchange1 ---> Queue11] ---> [Consumer1, Consumer2]
                                      [          \__> Queue12] __/^
                                      [Exchange2 ---> Queue21] ---> [Consumer3, Consumer4]
                                      [          \__> Queue22] __/^

Thực tế producer và consumer connect với MQ thông qua 1 channel connection, ta có thể config số lượng connection.
Producer --- Channel --- MessageBroker --- Channel --- Consumer

RabbitMQ như 1 khối, bên trong có các exchanges gắn với các queues khác nhau theo các routing rules tùy ý custom. 
Producers publish gói tin vào 1 exchange nào đó chứ k gửi trực tiếp vào queue. Exchange sẽ boardcast message tới queue theo routing rules. Consumers subscribe vào exchange để nhận message từ queue nó cần.
Có 4 loại exchange: topic, fanout, direct, header.

3) Có thể tuỳ biến nhiều loại, kết hợp 2 mô hình.



# Các kiểu exchange trong mô hình pubsub
Producer --- Exchange ___ Queue1 
                      \__ Queue2 
Exchange xử lý phân bố message vào queue đang lắng nghe đúng sự kiện or loại bỏ message nếu k cần thiết.

Có 4 loại exchange: 
- Direct exchange: định tuyến dựa vào routing key đặt trong message. Exchange gửi message tới queue liên kết với exchange đó mà có routing key khớp.
- Topic exchange: định tuyến tin nhắn dựa trên routing key kiểu wildcard. Exchange sẽ so khớp routing key của tin nhắn với routing pattern của queue
- Headers exchange: exchange so khớp thuộc tính trong trường header của tin nhắn với header trong pattern của queue
- Fanout exchange: loại đơn giản nhất vì routing message tới mọi queue liên kết với nó mà k qt routing key gì cả.

-> Dùng fanout exchange: Fanout như kiểu cánh quạt thổi ra ngoài ấy, mọi queue miễn là subscribe đều có thể nhận
Pb:
Dùng queue: tạo 1 queue name X -> producer gửi tin vào queue X -> consumer gắn vào queue X sẽ nhận được tin (thông qua channel)
Dùng pubsub: tạo 1 exchange name X -> producer cho exchange publish message -> consumer tạo queue tạm thời bind vào exchange X -> exchange publish message thì queue nhận được tin, rồi consumer gắn với queue cũng nhận được tin
=> Các kiểu exchange khác cũng tương tự, chỉ có routing method khác

-> Dùng topic exchange: Queue bind với đúng exchange và có routing key thỏa mãn thì nhận được message
Pattern topic dùng # và *



# durable, persistent, noAck, expiration, prefetch
Durable false / true thì khi server MQ crash or lỡ tay restart server thì dữ liệu mất vĩnh viễn hay vẫn bảo toàn, phải dùng kèm persistent. Cả client và server đều phải set durable cùng giá trị
Dùng persistent true kết hợp với durable để đảm bảo dữ liệu k bị mất. Nó đảm bảo lưu message vào cache và ổ đĩa để server MQ crash vẫn k mất

noAck: true thì consumer k cần gửi lại ack khi thực hiện xong, nguy cơ loss tin nhắn nếu consumer bị crash. false thì phải gửi lại ack thì queue mới xóa message, nếu consumer crash thì queue sẽ truyền tiếp cho consumer khác xử lý và tiếp tục chờ ack. 
Khi noAck là false kiểu gì cũng có case message kbh bị xóa nên còn có cơ chế ttl cho message tự xóa tránh phí bộ nhớ hoặc lưu lại để xử lý riêng về sau nếu là message quan trọng

Dùng channel.prefetch(1); để đảm bảo channel chỉ nhận 1 tin nhắn ở 1 thời điểm. Cài đặt này giải quyết vấn đề khi consumer X đang xử lý message 1 thì queue lại gửi tiếp message 2 thì X sẽ bị quá tải.

-> Quy tắc: 
- Queue ưu tiên cho consumer xử lý message là unacked trước ready 
- Mỗi message chỉ được xử lý bởi 1 consumer ở 1 thời điểm

VD: 1 consumer bắt message từ queue có 1 unacked, 1 ready thì nó nhận về unacked trước (unacked đó đang k được xử lý bởi consumer nào khác)
VD: 1 queue có 1 ready và 1 unacked đang được xử lý bởi 1 consumer. Consumer khác vào thì sẽ nhận message là ready vì message unacked đang được xử lý bởi 1 consumer r.

Tức thực tế nhiều consumer có thể hoạt động cùng lúc xử lý các message khác nhau trong 1 queue. VD tạo ra mỗi service 1 queue và nhiều consumers xử lý 1 services để giúp xư lý services đó cho nhiều user hơn cùng 1 lúc.
Service1 --- Nhiều consumer1 --- Queue1 --- | Producers | --- Server --- Users
Service2 --- Nhiều consumer2 --- Queue2 --- |           |       

-> Từ trang MQ manager, ta có thể xem, xóa queue or thêm queue với tên thoải mái
Khi gửi message vào queue, message sẽ nằm trong queue và các consumer có thể subscribe để bắt message. Xem trên manager sẽ thấy total là tổng số messsage trong queue, ready là số message sẵn sàng gửi tới consumer, unacked là số message đang được 1 consumer xử lý nhưng chưa nhận được ack hay vẫn chưa bị xóa khỏi queue.


